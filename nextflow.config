/**
	Yet Another Metagenomic Pipeline (YAMP)
	Copyright (C) 2017 	Dr Alessia Visconti 	      
	      
	This script is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This script is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this script.  If not, see <http://www.gnu.org/licenses/>.
	
	For any bugs or problems found, please contact us at
	- alessia.visconti@kcl.ac.uk ; 
	- https://github.com/alesssia/YAMP/issues
*/

manifest {
  name = 'YAMP'
  author = 'Alessia Visconti'
  homePage = 'https://github.com/alessia/yamp'
  description = 'Yet Another Metagenomic Pipeline'
  mainScript = 'YAMP.nf'
  version = '0.9.5.3'
}

params {

    /* 	Containers
     --------------------------------*/

    singularity_container_bbmap = "https://depot.galaxyproject.org/singularity/bbmap:38.87--h1296035_0"
    docker_container_bbmap = "quay.io/biocontainers/bbmap:38.87--h1296035_0"
  
    singularity_container_fastqc = "https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0"
    docker_container_fastqc = "quay.io/biocontainers/fastqc:0.11.9--0"
	
    singularity_container_multiqc = "https://depot.galaxyproject.org/singularity/multiqc:1.9--py_1"
    docker_container_multiqc = "quay.io/biocontainers/multiqc:1.9--py_1"
  
    singularity_container_biobakery = "biobakery/workflows:3.0.0.a.6.metaphlanv3.0.7"
    docker_container_biobakery = "biobakery/workflows:3.0.0.a.6.metaphlanv3.0.7"
  
    singularity_container_qiime2 = "qiime2/core:2020.8"
    docker_container_qiime2  = "qiime2/core:2020.8"
	
	
    /* 	Execution flow parameters
     --------------------------------*/	
	
	// Please refer to the ./conf/base.conf file
	
    
	/* 	Processing parameters
     --------------------------------*/
	
  	// Please refer to the ./conf/base.conf file
	
  
    /* 	Initialisation
     --------------------------------*/
  
	//These are used when the analysis is in characterisation mode
	reads1 = ""
	reads2 = ""
  reads="$projectDir/data/test_data/"
	
	//These are used to print version and help
	help = null
	version = null
	
	multiqc_config="$baseDir/conf/multiqc_config.yaml"
  multiqc_css="$baseDir/assets/multiqc/multiqc.css"
  multiqc_replace_names="$baseDir/assets/multiqc/replace_sample_names.txt"
}

profiles {
	
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
  }

  conda {
    includeConfig 'conf/conda.config'
  }
  
  // Enables Docker (please load with another config file)
  docker {
    docker.enabled = true
    // Avoid this error:
    // WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behaviour as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
	// If you still get the error above, please decomment the following line (thanks to Flavia Flaviani; https://github.com/flacchy)
	// docker.runOptions = "--memory-swap '-1'"
  }
  
  // For the KCL HPC (Rosalind)
  rosalind {
    singularity.enabled = true
  	process.executor = 'slurm'
	process.queue = 'brc'
  }
  
  // Enables singularity (please load with another config file)
  singularity {
    singularity.enabled = true
  }
  
  base {
    includeConfig 'conf/base.config'
  }

  fs {
    includeConfig 'conf/filesystem.config'
  }

  paired_end_complete {
    includeConfig 'conf/paired_end_complete.config'
  }

  sge {
    includeConfig 'conf/sge.config'
  }
  
  // The following are test profiles  
  test {
    includeConfig 'conf/test.config'
  }
  
  test_paired_end_complete {
      includeConfig 'conf/test.config'
	  includeConfig 'conf/test_paired_end_complete.config'
  }
  
  test_paired_end_QC {
      includeConfig 'conf/test.config'
	  includeConfig 'conf/test_paired_end_QC.config'
  }
  
  test_paired_end_characterisation {
      includeConfig 'conf/test.config'
	  includeConfig 'conf/test_paired_end_characterisation.config'
  }
  
  test_single_end_complete {
      includeConfig 'conf/test.config'
	  includeConfig 'conf/test_single_end_complete.config'
  }
  
  test_single_end_QC {
      includeConfig 'conf/test.config'
	  includeConfig 'conf/test_single_end_QC.config'
  }
  
  test_single_end_characterisation {
      includeConfig 'conf/test.config'
	  includeConfig 'conf/test_single_end_characterisation.config'
  }
}


trace {
    enabled = false
    fields = 'task_id, name, status, exit, module, submit, start, complete, duration, realtime, %cpu, rss, vmem, peak_rss, peak_vmem'
}

timeline 
{
    enabled = true
}

report
{
	enabled = true
	file = "computing_report.html"
}

dag {
  enabled = false
}
